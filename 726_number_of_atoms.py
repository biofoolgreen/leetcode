"""
给定一个化学式formula（作为字符串），返回每种原子的数量。

原子总是以一个大写字母开始，接着跟随0个或任意个小写字母，表示原子的名字。

如果数量大于 1，原子后会跟着数字表示原子的数量。如果数量等于 1 则不会跟数字。例如，H2O 和 H2O2 是可行的，但 H1O2 这个表达是不可行的。

两个化学式连在一起是新的化学式。例如 H2O2He3Mg4 也是化学式。

一个括号中的化学式和数字（可选择性添加）也是化学式。例如 (H2O2) 和 (H2O2)3 是化学式。

给定一个化学式 formula ，返回所有原子的数量。格式为：第一个（按字典序）原子的名字，跟着它的数量（如果数量大于 1），然后是第二个原子的名字（按字典序），跟着它的数量（如果数量大于 1），以此类推。

 

示例 1：

输入：formula = "H2O"
输出："H2O"
解释：
原子的数量是 {'H': 2, 'O': 1}。

示例 2：

输入：formula = "Mg(OH)2"
输出："H2MgO2"
解释： 
原子的数量是 {'H': 2, 'Mg': 1, 'O': 2}。

示例 3：

输入：formula = "K4(ON(SO3)2)2"
输出："K4N2O14S4"
解释：
原子的数量是 {'K': 4, 'N': 2, 'O': 14, 'S': 4}。

示例 4：

输入：formula = "Be32"
输出："Be32"

 

提示：

    1 <= formula.length <= 1000
    formula 由小写英文字母、数字 '(' 和 ')' 组成。
    formula 是有效的化学式。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/number-of-atoms
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
"""

class Solution:
    def countOfAtoms(self, formula: str) -> str:
        """
        从左到右遍历该化学式，并使用哈希表记录当前层遍历到的原子及其数量，因此初始时需将一个空的哈希表压入栈中。对于当前遍历的字符：
            如果是左括号，将一个空的哈希表压入栈中，进入下一层。
            如果不是括号，则读取一个原子名称，若后面还有数字，则读取一个数字，否则将该原子后面的数字视作 111。然后将原子及数字加入栈顶的哈希表中。
            如果是右括号，则说明遍历完了当前层，若括号右侧还有数字，则读取该数字 num\textit{num}num，否则将该数字视作 111。然后将栈顶的哈希表弹出，将弹出的哈希表中的原子数量与 num\textit{num}num 相乘，加到上一层的原子数量中。
        遍历结束后，栈顶的哈希表即为化学式中的原子及其个数。遍历哈希表，取出所有「原子-个数」对加入数组中，对数组按照原子字典序排序，然后遍历数组，按题目要求拼接成答案。
        """
        i, n = 0, len(formula)
        stack = []
        name, count = '', ''
        while i < n:
            if formula[i] == "(":
                stack.append({})
                i += 1
                continue
            elif formula[i].isalpha:
                



if __name__ == '__main__':
    sl = Solution()
    formula = "Mg(OH)2"
    print(sl.countOfAtoms(formula))