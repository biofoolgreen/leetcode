'''
@Description: 
@Version: 
@Author: liguoying@iiotos.com
@Date: 2019-12-09 23:34:09
@LastEditTime: 2019-12-10 00:50:52
@LastEditors: 
'''
# 题目描述
"""
班上有 N 名学生。其中有些人是朋友，有些则不是。他们的友谊具有是传递性。如果已知 A 是 B 的朋友，B 是 C 的朋友，那么我们可以认为 A 也是 C 的朋友。所谓的朋友圈，是指所有朋友的集合。
给定一个 N * N 的矩阵 M，表示班级中学生之间的朋友关系。如果M[i][j] = 1，表示已知第 i 个和 j 个学生互为朋友关系，否则为不知道。你必须输出所有学生中的已知的朋友圈总数。

示例 1:
输入: 
[[1,1,0],
 [1,1,0],
 [0,0,1]]
输出: 2 
说明：已知学生0和学生1互为朋友，他们在一个朋友圈。
第2个学生自己在一个朋友圈。所以返回2。

示例 2:
输入: 
[[1,1,0],
 [1,1,1],
 [0,1,1]]
输出: 1
说明：已知学生0和学生1互为朋友，学生1和学生2互为朋友，所以学生0和学生2也是朋友，所以他们三个在一个朋友圈，返回1。

注意：
N 在[1,200]的范围内。
对于所有学生，有M[i][i] = 1。
如果有M[i][j] = 1，则有M[j][i] = 1。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/friend-circles
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
"""
from typing import List

class Solution:
    def findCircleNum(self, M: List[List[int]]) -> int:
        arr = list(range(len(M)))
        visited = [0] * len(M)
        count = 0
        for i in range(len(M)):
            for j in range(i+1, len(M)):
                if M[i][j] == 1:
                    # 如果j与i认识且j没有被访问过
                    if visited[j]==0:
                        arr[j] = arr[i]
                        visited[i] = visited[j] = 1       
                    else:
                        if visited[i] == 0:
                            arr[i] = arr[j]
                            visited[i] = 1
                        else:
                            if arr[i] != arr[j]:
                                for k in range(j+1):
                                    if arr[k]==arr[i]:
                                        arr[k] = arr[j]
                                arr[i] = arr[j]
                print(f"i={i}, j={j}, arr={arr}, visited={visited}")
            print("="*30)
        return len(set(arr))

if __name__ == '__main__':
    s = Solution()
    # M = [
    #     [1,1,0,0],
    #     [1,1,0,0], 
    #     [0,0,1,1],
    #     [0,0,1,1]
    #     ]
    # M = [
    #     [1,0,0,1],
    #     [0,1,1,0],
    #     [0,1,1,1],
    #     [1,0,1,1]
    # ]
    M = [
        [1,1,0,0,0,0,0,1,0,0,0,0,0,0,0],
        [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,1,0,1,1,0,0,0,0,0,0,0,0],
        [0,0,0,0,1,0,0,0,0,1,1,0,0,0,0],
        [0,0,0,1,0,1,0,0,0,0,1,0,0,0,0],
        [0,0,0,1,0,0,1,0,1,0,0,0,0,1,0],
        [1,0,0,0,0,0,0,1,1,0,0,0,0,0,0],
        [0,0,0,0,0,0,1,1,1,0,0,0,0,1,0],
        [0,0,0,0,1,0,0,0,0,1,0,1,0,0,1],
        [0,0,0,0,1,1,0,0,0,0,1,1,0,0,0],
        [0,0,0,0,0,0,0,0,0,1,1,1,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,1,0,0],
        [0,0,0,0,0,0,1,0,1,0,0,0,0,1,0],
        [0,0,0,0,0,0,0,0,0,1,0,0,0,0,1]
        ]
    s.findCircleNum(M)